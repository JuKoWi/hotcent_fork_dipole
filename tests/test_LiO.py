""" Tests for multipole-related functionality.

Reference values come from the BeckeHarris tool, unless mentioned otherwise.
"""
import pytest
import numpy as np
from hotcent.confinement import SoftConfinement
from hotcent.kleinman_bylander import KleinmanBylanderPP
from hotcent.pseudo_atomic_dft import PseudoAtomicDFT
from hotcent.offsite_chargetransfer import INTEGRALS_2CK, NUMSK_2CM


R1 = 2.4

SZP = 'szp'
DZ = 'dz'
DZP = 'dzp'

LDA = 'LDA'
PBE = 'GGA_X_PBE+GGA_C_PBE'

# The following will be used to avoid unnecessary fixture rebuilds
SZP_LDA = SZP + '-' + LDA
SZP_PBE = SZP + '-' + PBE
DZ_LDA = DZ + '-' + LDA
DZ_PBE = DZ + '-' + PBE
DZP_LDA = DZP + '-' + LDA
DZP_PBE = DZP + '-' + PBE


@pytest.fixture(scope='module')
def atoms(request):
    size, xc = request.param.split('-')

    configuration = {
        'Li': '[He] 2s1',
        'O': '[He] 2s2 2p4',
    }

    wf_confinements = {
        'O': {
            '2s': SoftConfinement(rc=4.01),
            '2p': SoftConfinement(rc=4.80),
        },
        'Li': {
            '2s': SoftConfinement(rc=7.73),
        },
    }

    pp_setup = {
        'O': {
            'lmax': 1,
            'local_component': 'd',
        },
        'Li': {
            'valence': ['2s'],
            'local_component': 'siesta',
            'rcore': 2.4958,
            'with_polarization': True,
        },
    }

    r_pol = {
        'Li': 2.338,
        'O': 1.125,
    }

    atoms = []
    for element in ['Li', 'O']:
        valence = list(wf_confinements[element].keys())
        pp = KleinmanBylanderPP('./pseudos/{0}.psf'.format(element),
                                verbose=True, **pp_setup[element])

        atom = PseudoAtomicDFT(element, pp,
                               xc=xc,
                               nodegpts=1000,
                               valence=valence,
                               configuration=configuration[element],
                               wf_confinement=wf_confinements[element],
                               perturbative_confinement=True,
                               scalarrel=False,
                               timing=False,
                               txt=None,
                               )
        atom.run()
        atom.generate_nonminimal_basis(size=size, tail_norm=0.15,
                                       r_pol=r_pol[element])
        atoms.append(atom)

    return atoms


@pytest.mark.parametrize('atoms', [DZP_LDA, SZP_PBE], indirect=True)
def test_on1cU(atoms):
    from hotcent.onsite_chargetransfer import Onsite1cUTable

    atom_Li, atom_O = atoms
    size = atom_O.basis_size
    xc = atom_O.xcname

    chgon1c = Onsite1cUTable(atom_O)
    chgon1c.run(nl='2s', xc=xc)
    U = chgon1c.table

    U_ref = {
        LDA: np.array([9.81309055, 1.73932124, 0.47140538]),
        PBE: np.array([9.83795309, 1.70129873, 0.34327382]),
    }

    msg = 'Too large error for U_{0} (value={1})'
    tol = 1e-4

    for i, (val, ref) in enumerate(zip(U, U_ref[xc])):
        U_diff = np.abs(val - ref)
        assert U_diff < tol, msg.format(i, val)

    return


@pytest.mark.parametrize('atoms', [DZP_LDA], indirect=True)
def test_on1cM(atoms):
    # Regression test
    from hotcent.onsite_chargetransfer import Onsite1cMTable

    atom_Li, atom_O = atoms
    size = atom_O.basis_size
    xc = atom_O.xcname

    momon1c = Onsite1cMTable(atom_O)
    momon1c.run()
    M = momon1c.tables

    M_ref = {
        (DZP, LDA): {
            (0, 0): np.array([
                [[1.        , 0.98838401, 0.89197069, 0.        ],
                 [0.98838401, 1.        , 0.89339865, 0.        ],
                 [0.89197069, 0.89339865, 1.        , 0.        ],
                 [0.        , 0.        , 0.        , 0.        ]],
                [[1.        , 0.98838401, 0.89197069, 0.        ],
                 [0.98838401, 1.        , 0.89339865, 0.        ],
                 [0.89197069, 0.89339865, 1.        , 0.        ],
                 [0.        , 0.        , 0.        , 0.        ]],
                [[1.        , 0.98838401, 0.89197069, 0.        ],
                 [0.98838401, 1.        , 0.89339865, 0.        ],
                 [0.89197069, 0.89339865, 1.        , 0.        ],
                 [0.        , 0.        , 0.        , 0.        ]],
                 ]),
            (0, 1): np.array([
                [[0.94300449, 0.97578518, 0.        , 0.        ],
                 [0.9021508 , 0.94983381, 0.        , 0.        ],
                 [0.72607128, 0.81161633, 0.        , 0.        ],
                 [0.        , 0.        , 0.        , 0.        ]],
                [[0.94300449, 0.97578518, 0.        , 0.        ],
                 [0.9021508 , 0.94983381, 0.        , 0.        ],
                 [0.72607128, 0.81161633, 0.        , 0.        ],
                 [0.        , 0.        , 0.        , 0.        ]],
                [[0.94300449, 0.97578518, 0.        , 0.        ],
                 [0.9021508 , 0.94983381, 0.        , 0.        ],
                 [0.72607128, 0.81161633, 0.        , 0.        ],
                 [0.        , 0.        , 0.        , 0.        ]],
                ]),
            (1, 0): np.array([
                [[0.94300449, 0.9021508 , 0.72607128, 0.        ],
                 [0.97578518, 0.94983381, 0.81161633, 0.        ],
                 [0.        , 0.        , 0.        , 0.        ],
                 [0.        , 0.        , 0.        , 0.        ]],
                [[0.94300449, 0.9021508 , 0.72607128, 0.        ],
                 [0.97578518, 0.94983381, 0.81161633, 0.        ],
                 [0.        , 0.        , 0.        , 0.        ],
                 [0.        , 0.        , 0.        , 0.        ]],
                [[0.94300449, 0.9021508 , 0.72607128, 0.        ],
                 [0.97578518, 0.94983381, 0.81161633, 0.        ],
                 [0.        , 0.        , 0.        , 0.        ],
                 [0.        , 0.        , 0.        , 0.        ]],
                ]),
            (1, 1): np.array([
                [[1.       , 0.9844906, 0.       , 0.       ],
                 [0.9844906, 1.       , 0.       , 0.       ],
                 [0.       , 0.       , 0.       , 0.       ],
                 [0.       , 0.       , 0.       , 0.       ]],
                [[1.       , 0.9844906, 0.       , 0.       ],
                 [0.9844906, 1.       , 0.       , 0.       ],
                 [0.       , 0.       , 0.       , 0.       ],
                 [0.       , 0.       , 0.       , 0.       ]],
                [[1.       , 0.9844906, 0.       , 0.       ],
                 [0.9844906, 1.       , 0.       , 0.       ],
                 [0.       , 0.       , 0.       , 0.       ],
                 [0.       , 0.       , 0.       , 0.       ]],
                ]),
        },
    }

    msg = 'Too large error for M_{0} (value={1})'
    tol = 1e-8

    for key, ref in M_ref[(size, xc)].items():
        val = M[key]
        M_diff = np.max(np.abs(val - ref))
        assert M_diff < tol, msg.format(key, str(val))

    return


@pytest.mark.parametrize('R', [R1])
@pytest.mark.parametrize('atoms', [DZP_LDA, SZP_PBE], indirect=True)
def test_on2cU(R, atoms):
    from hotcent.onsite_chargetransfer import Onsite2cUTable

    atom_Li, atom_O = atoms
    size = atom_O.basis_size
    xc = atom_O.xcname
    rmin, dr, N = R, R, 2

    chgon2c = Onsite2cUTable(atom_O, atom_Li)
    chgon2c.run(nl='2s', rmin=rmin, dr=dr, N=N, xc=xc, ntheta=300, nr=100,
                smoothen_tails=False)
    U = chgon2c.tables

    U_ref = {
        (R1, DZP, LDA): {
            'sss': 0.00759117,
            'sps': 0.00488657,
            'sds': 0.00295531,
            'pss': 0.00488657,
            'pps': 0.01023448,
            'ppp': 0.00626952,
            'pds': 0.00647822,
            'pdp': 0.00256833,
            'dss': 0.00295531,
            'dps': 0.00647822,
            'dpp': 0.00256833,
            'dds': 0.01113785,
            'ddp': 0.00742948,
            'ddd': 0.00597954,
        },
        (R1, SZP, PBE): {
            'sss': 0.00623313,
            'sps': 0.00298712,
            'sds': 0.00148664,
            'pss': 0.00298712,
            'pps': 0.00852381,
            'ppp': 0.00672257,
            'pds': 0.00450096,
            'pdp': 0.00201647,
            'dss': 0.00148664,
            'dps': 0.00450096,
            'dpp': 0.00201647,
            'dds': 0.01204812,
            'ddp': 0.00922716,
            'ddd': 0.00851107,
        }
    }

    msg = 'Too large error for U_{0} (value={1})'
    tol = 1e-6 if xc == 'LDA' else 1e-5

    for integral, ref in U_ref[R, size, xc].items():
        index = INTEGRALS_2CK.index(integral)
        val = U[0, index]
        U_diff = np.abs(val - ref)
        assert U_diff < tol, msg.format(integral, val)

    return


@pytest.mark.parametrize('R', [R1])
@pytest.mark.parametrize('atoms', [DZP_LDA, SZP_PBE], indirect=True)
def test_off2cU(R, atoms):
    from hotcent.offsite_chargetransfer import Offsite2cUTable

    atom_Li, atom_O = atoms
    size = atom_O.basis_size
    xc = atom_O.xcname
    rmin, dr, N = R, R, 2

    chgoff2c = Offsite2cUTable(atom_O, atom_Li)
    chgoff2c.run(nl=('2s', '2s'), rmin=rmin, dr=dr, N=N, xc=xc, ntheta=300,
                 nr=100, smoothen_tails=False)
    U = chgoff2c.tables

    U_ref = {
        (R1, DZP, LDA): {
            0: {
            'sss': -1.33682398,
            'sps': -1.43962603,
            'sds': 0.70122587,
            'pss': 0.32894411,
            'pps': 0.03409693,
            'ppp': 0.38044666,
            'pds': -0.09723295,
            'pdp': -0.31847979,
            'dss': 0.01671739,
            'dps': 0.04257551,
            'dpp': 0.08194276,
            'dds': -0.00535394,
            'ddp': -0.03105666,
            'ddd': 0.07323604,
            },
            1: {
            'sss': -1.33682383,
            'sps': -0.32894414,
            'sds': 0.01671807,
            'pss': 1.43962609,
            'pps': 0.03409696,
            'ppp': 0.38044664,
            'pds': -0.04257362,
            'pdp': -0.08194286,
            'dss': 0.70122589,
            'dps': 0.09723301,
            'dpp': 0.31847968,
            'dds': -0.00535135,
            'ddp': -0.03105694,
            'ddd': 0.07323594,
            },
        },
        (R1, SZP, PBE): {
            0: {
            'sss': -1.34354020,
            'sps': -1.43832498,
            'sds': 0.69851735,
            'pss': 0.32442785,
            'pps': 0.03843244,
            'ppp': 0.38064809,
            'pds': -0.10279173,
            'pdp': -0.31724836,
            'dss': 0.01602681,
            'dps': 0.04272861,
            'dpp': 0.08203186,
            'dds': -0.00572780,
            'ddp': -0.02866380,
            'ddd': 0.07327689,
            },
            1: {
            'sss': -1.34354009,
            'sps': -0.32442788,
            'sds': 0.01602756,
            'pss': 1.43832504,
            'pps': 0.03843247,
            'ppp': 0.38064807,
            'pds': -0.04272675,
            'pdp': -0.08203197,
            'dss': 0.69851737,
            'dps': 0.10279179,
            'dpp': 0.31724826,
            'dds': -0.00572528,
            'ddp': -0.02866407,
            'ddd': 0.07327679,
            },
        },
    }

    msg = 'Too large error for U_{0} (value={1})'
    tol = 1e-4

    for p, refs in U_ref[R, size, xc].items():
        if p == 0:
            sym1, sym2 = chgoff2c.ela.get_symbol(), chgoff2c.elb.get_symbol()
        elif p == 1:
            sym2, sym1 = chgoff2c.ela.get_symbol(), chgoff2c.elb.get_symbol()

        for integral, ref in refs.items():
            index = INTEGRALS_2CK.index(integral)

            val = U[p][0, index]
            if integral != 'sss':
                U_delta = chgoff2c.evaluate_point_multipole_hartree(sym1, sym2,
                                                                    integral, R)
                val += U_delta

            U_diff = np.abs(val - ref)
            assert U_diff < tol, msg.format(integral, val)

    return


@pytest.mark.parametrize('R', [R1])
@pytest.mark.parametrize('atoms', [DZP_LDA], indirect=True)
def test_off2cM(R, atoms):
    # Regression test
    from hotcent.offsite_chargetransfer import Offsite2cMTable

    atom_Li, atom_O = atoms
    size = atom_O.basis_size
    xc = atom_O.xcname
    rmin, dr, N = R, R, 2

    momoff2c = Offsite2cMTable(atom_O, atom_Li)
    momoff2c.run(rmin=rmin, dr=dr, N=N, ntheta=300, nr=100,
                 smoothen_tails=False)
    M = momoff2c.tables

    M_ref = {
        (DZP, LDA): {
            (0, 0, 0): (
                np.array([
                    3.805011e-01, -5.776285e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 7.647023e-02, -1.564089e-01, 2.527447e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -1.682107e-02, 3.099168e-02,
                    1.600786e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -1.803853e-02, 3.332237e-02,
                    6.250976e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    -9.134461e-03, 1.332263e-02, 1.850562e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.array([
                    4.476727e-01, -5.982948e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 1.109324e-01, -1.519095e-01, 3.167438e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -1.582277e-02, 6.088318e-02,
                    2.238881e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -2.315836e-02, 5.802928e-02,
                    9.887938e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    -1.308051e-02, 2.538399e-02, 3.335858e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.array([
                    4.036245e-01, -6.019672e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 8.358031e-02, -1.844798e-01, 2.890860e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -2.161411e-02, 3.068535e-02,
                    1.841500e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -2.164519e-02, 3.520976e-02,
                    6.922550e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    -1.046655e-02, 1.340059e-02, 1.917001e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
            ),
            (0, 0, 1): (
                np.array([
                    4.142357e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 1.194630e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -5.663481e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -6.058223e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    -3.080230e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.array([
                    4.711823e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 1.685270e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -5.434368e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -7.712353e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    -4.437805e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.array([
                    4.315427e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 1.298109e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -7.269208e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -7.274750e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    -3.526901e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
            ),
            (0, 1, 0): (
                np.array([
                    2.475523e-01, -4.513037e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 3.237011e-02, -1.117745e-01, 1.292109e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -9.395511e-03, 3.406289e-03,
                    5.981550e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -6.864092e-03, 7.199881e-03,
                    1.639508e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    -2.674855e-03, 2.130698e-03, 3.299352e-03, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.array([
                    2.937110e-01, -5.066638e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 4.488358e-02, -1.340048e-01, 1.709726e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -1.278268e-02, 9.090049e-03,
                    9.023230e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -1.056874e-02, 1.341284e-02,
                    2.864946e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    -4.533852e-03, 4.514603e-03, 6.755405e-03, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.zeros(NUMSK_2CM),
            ),
            (0, 1, 1): (
                np.array([
                    2.901818e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 5.375877e-02, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -3.159152e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -2.306920e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    -9.015967e-03, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.array([
                    3.350286e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 7.262014e-02, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -4.297470e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, -3.552688e-02, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    -1.527885e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.zeros(NUMSK_2CM),
            ),
            (1, 0, 0): (
                np.array([
                    3.805011e-01, -1.109324e-01, -2.161411e-02, 0.000000e+00,
                    0.000000e+00, 5.327943e-01, -2.571821e-02, 2.962018e-01,
                    -3.638999e-02, -1.182601e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 4.712476e-01, 1.172667e-01,
                    4.358033e-01, -6.506054e-03, -1.397278e-01, 1.683735e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 3.396584e-01, 1.785503e-01,
                    4.348469e-01, 7.889641e-02, -5.646419e-02, 3.194126e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    2.176638e-01, 1.693153e-01, 3.667707e-01, 1.817985e-01,
                    7.165367e-02, 4.112596e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.array([
                    4.189509e-01, -2.157434e-01, -9.051354e-03, 0.000000e+00,
                    0.000000e+00, 5.776285e-01, -1.519095e-01, 3.167438e-01,
                    -3.068535e-02, -1.841500e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 4.984536e-01, 1.425732e-02,
                    4.545682e-01, -2.105285e-02, -2.429699e-01, 1.884217e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 3.505796e-01, 9.855065e-02,
                    4.461018e-01, 4.915232e-02, -1.623997e-01, 3.516460e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    2.207951e-01, 1.102091e-01, 3.764076e-01, 1.470665e-01,
                    -1.517166e-02, 4.438207e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.zeros(NUMSK_2CM),
            ),
            (1, 0, 1): (
                np.array([
                    2.475523e-01, -4.488358e-02, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 3.922706e-01, -4.376527e-02, 1.488135e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 4.233234e-01, 7.859692e-03,
                    2.771905e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 3.815550e-01, 7.472404e-02,
                    3.552012e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    2.990748e-01, 1.229434e-01, 3.696608e-01, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.array([
                    2.859718e-01, -1.053588e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 4.513037e-01, -1.340048e-01, 1.709726e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 4.828968e-01, -7.931034e-02,
                    3.159223e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 4.293102e-01, 6.040742e-03,
                    4.002306e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    3.297311e-01, 7.436962e-02, 4.108985e-01, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.zeros(NUMSK_2CM),
            ),
            (1, 1, 0): (
                np.array([
                    4.142357e-01, -1.685270e-01, -7.269208e-02, 0.000000e+00,
                    0.000000e+00, 5.810731e-01, -1.087230e-01, 3.189576e-01,
                    -1.080563e-01, -1.585986e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 5.103816e-01, 4.638222e-02,
                    4.662102e-01, -7.393820e-02, -2.077955e-01, 1.929391e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 3.631303e-01, 1.248231e-01,
                    4.625113e-01, 2.585095e-02, -1.297037e-01, 3.642184e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    2.301611e-01, 1.309946e-01, 3.926922e-01, 1.455459e-01,
                    1.173399e-02, 4.647385e-01, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.zeros(NUMSK_2CM),
                np.zeros(NUMSK_2CM),
            ),
            (1, 1, 1): (
                np.array([
                    2.901818e-01, -7.262014e-02, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 4.592652e-01, -8.647338e-02, 1.743908e-01,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 4.942337e-01, -3.494271e-02,
                    3.246855e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 4.431292e-01, 4.106555e-02,
                    4.153512e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    3.441135e-01, 1.013372e-01, 4.307519e-01, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
                    0.000000e+00, 0.000000e+00, 0.000000e+00,
                ]),
                np.zeros(NUMSK_2CM),
                np.zeros(NUMSK_2CM),
            ),
        },
    }

    msg = 'Too large error for M_{0} (value={1})'
    tol = 1e-7

    for key, ref in M_ref[(size, xc)].items():
        val = M[key][:, 0, :]
        M_diff = np.max(np.abs(val - ref))
        assert M_diff < tol, msg.format(key, str(val))

    return
